-- Create ENUM types for controlled vocabularies
CREATE TYPE public.account_type_enum AS ENUM ('CHECKING', 'SAVINGS');
CREATE TYPE public.account_status_enum AS ENUM ('ACTIVE', 'DORMANT', 'PENDING_CLOSURE', 'CLOSED');
CREATE TYPE public.customer_status_enum AS ENUM ('PENDING_VERIFICATION', 'ACTIVE', 'SUSPENDED', 'CLOSED');
CREATE TYPE public.ledger_entry_type_enum AS ENUM ('DEBIT', 'CREDIT');

-- Customers Table
CREATE TABLE public.customers (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    -- Link to the user in Auth0. Should be unique.
    auth0_user_id text NOT NULL UNIQUE, 
    email text NOT NULL UNIQUE, -- Often synced from Auth0 initially
    full_name text NULL,
    date_of_birth date NULL,
    address jsonb NULL, -- Store structured address info
    status public.customer_status_enum NOT NULL DEFAULT 'PENDING_VERIFICATION'::public.customer_status_enum,
    -- Add other KYC-related fields as necessary
    kyc_status text NULL -- e.g., 'NOT_STARTED', 'PENDING', 'VERIFIED', 'FAILED'
);
-- Index for quick lookup based on Auth0 ID
CREATE INDEX idx_customers_auth0_user_id ON public.customers(auth0_user_id);
-- Automatically update 'updated_at' timestamp (Requires the moddatetime extension)
-- Enable the extension first if not already enabled
CREATE EXTENSION IF NOT EXISTS moddatetime WITH SCHEMA extensions;
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.customers 
  FOR EACH ROW EXECUTE PROCEDURE moddatetime (updated_at);
-- Enable Row Level Security!
ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY;
-- Example RLS policies (adapt as needed based on auth schema)
-- CREATE POLICY select_own_customer ON public.customers
--   FOR SELECT USING (auth0_user_id = auth.uid());
-- CREATE POLICY update_own_customer ON public.customers
--   FOR UPDATE USING (auth0_user_id = auth.uid());

-- Accounts Table
CREATE TABLE public.accounts (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamptz NOT NULL DEFAULT now(),
    -- Foreign key linking to the customer owning this account
    customer_id uuid NOT NULL REFERENCES public.customers(id), 
    account_number text NOT NULL UNIQUE, -- Needs robust generation logic
    account_type public.account_type_enum NOT NULL,
    status public.account_status_enum NOT NULL DEFAULT 'ACTIVE'::public.account_status_enum,
    currency character(3) NOT NULL DEFAULT 'USD'::bpchar, -- ISO 4217 currency code
    nickname text NULL, 
    -- Balance is not stored here; it's calculated dynamically from the ledger.
    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES public.customers(id)
);
-- Indexes for efficient lookups
CREATE INDEX idx_accounts_customer_id ON public.accounts(customer_id);
CREATE INDEX idx_accounts_account_number ON public.accounts(account_number);
-- Enable Row Level Security (RLS) for this table!
ALTER TABLE public.accounts ENABLE ROW LEVEL SECURITY;
-- Example RLS Policy: Allow customer to see their own accounts
-- CREATE POLICY select_own_accounts ON public.accounts
--   FOR SELECT USING (customer_id = (SELECT customer_id FROM public.users WHERE auth0_user_id = auth.uid())); 
--   -- Note: Assumes a users/customers table linked to auth.uid() from Auth0

-- Ledger Entries Table
CREATE TABLE public.ledger_entries (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Sequential ID for ordering
    created_at timestamptz NOT NULL DEFAULT now(), -- Timestamp of entry creation
    -- Groups entries belonging to the same logical financial transaction (e.g., a transfer)
    transaction_id uuid NOT NULL, 
    -- Account affected by this specific entry (debit or credit)
    account_id uuid NOT NULL REFERENCES public.accounts(id),
    entry_type public.ledger_entry_type_enum NOT NULL,
    -- Amount for this entry (always positive). Use NUMERIC for precision.
    amount numeric(19, 4) NOT NULL CHECK (amount > 0), 
    currency character(3) NOT NULL, -- ISO 4217 currency code
    description text NULL, -- Optional description for the entry
    CONSTRAINT fk_account FOREIGN KEY (account_id) REFERENCES public.accounts(id)
);
-- Indexes for common queries (balance calculation, transaction lookup)
CREATE INDEX idx_ledger_entries_account_id_created_at ON public.ledger_entries(account_id, created_at DESC);
CREATE INDEX idx_ledger_entries_transaction_id ON public.ledger_entries(transaction_id);
CREATE INDEX idx_ledger_entries_created_at ON public.ledger_entries(created_at DESC);
-- RLS should also be considered here, though access might be restricted to backend roles/functions.
ALTER TABLE public.ledger_entries ENABLE ROW LEVEL SECURITY;
